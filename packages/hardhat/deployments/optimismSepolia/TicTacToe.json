{
  "address": "0x1BdAD4e1A24B07a6f9B0dA8614D00345E10943dB",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "playerX",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "playerO",
          "type": "address"
        }
      ],
      "name": "GameCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "GameDraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "GameWon",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "position",
          "type": "uint8"
        }
      ],
      "name": "MoveMade",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_playerO",
          "type": "address"
        }
      ],
      "name": "createGame",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "games",
      "outputs": [
        {
          "internalType": "address",
          "name": "playerX",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "playerO",
          "type": "address"
        },
        {
          "internalType": "enum TicTacToe.Player",
          "name": "currentTurn",
          "type": "uint8"
        },
        {
          "internalType": "enum TicTacToe.GameState",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "getGame",
      "outputs": [
        {
          "internalType": "address",
          "name": "playerX",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "playerO",
          "type": "address"
        },
        {
          "internalType": "enum TicTacToe.Player",
          "name": "currentTurn",
          "type": "uint8"
        },
        {
          "internalType": "enum TicTacToe.Player[9]",
          "name": "board",
          "type": "uint8[9]"
        },
        {
          "internalType": "enum TicTacToe.GameState",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "position",
          "type": "uint8"
        }
      ],
      "name": "makeMove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextGameId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6b9578edeff1879d8d8ff13a31f64dafa9732e9d4bc1b2885948130220d534cc",
  "receipt": {
    "to": null,
    "from": "0xE7ab206932a91958D13ef96Ff70a2F3f58B3511C",
    "contractAddress": "0x1BdAD4e1A24B07a6f9B0dA8614D00345E10943dB",
    "transactionIndex": 42,
    "gasUsed": "884601",
    "logsBloom": "0x
    "blockHash": "0xd90c57885777fd91a64c376a00654a86415d4dde416869a281eb6f2e55b8a83b",
    "transactionHash": "0x6b9578edeff1879d8d8ff13a31f64dafa9732e9d4bc1b2885948130220d534cc",
    "logs": [],
    "blockNumber": 27423732,
    "cumulativeGasUsed": "14716520",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "31800e2963c75132f57fb73056af782c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"playerX\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"playerO\",\"type\":\"address\"}],\"name\":\"GameCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"GameDraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"GameWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"position\",\"type\":\"uint8\"}],\"name\":\"MoveMade\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_playerO\",\"type\":\"address\"}],\"name\":\"createGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"playerX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"playerO\",\"type\":\"address\"},{\"internalType\":\"enum TicTacToe.Player\",\"name\":\"currentTurn\",\"type\":\"uint8\"},{\"internalType\":\"enum TicTacToe.GameState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGame\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"playerX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"playerO\",\"type\":\"address\"},{\"internalType\":\"enum TicTacToe.Player\",\"name\":\"currentTurn\",\"type\":\"uint8\"},{\"internalType\":\"enum TicTacToe.Player[9]\",\"name\":\"board\",\"type\":\"uint8[9]\"},{\"internalType\":\"enum TicTacToe.GameState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"position\",\"type\":\"uint8\"}],\"name\":\"makeMove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextGameId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TicTacToe.sol\":\"TicTacToe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/TicTacToe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract TicTacToe {\\n    // Game state\\n    enum Player { None, X, O }\\n    enum GameState { Active, Won, Draw }\\n    \\n    struct Game {\\n        address playerX;\\n        address playerO;\\n        Player currentTurn;\\n        Player[9] board;\\n        GameState state;\\n        address winner;\\n    }\\n    \\n    // Mapping of game ID to Game struct\\n    mapping(uint256 => Game) public games;\\n    uint256 public nextGameId;\\n    \\n    // Events\\n    event GameCreated(uint256 gameId, address playerX, address playerO);\\n    event MoveMade(uint256 gameId, address player, uint8 position);\\n    event GameWon(uint256 gameId, address winner);\\n    event GameDraw(uint256 gameId);\\n    \\n    // Create a new game\\n    function createGame(address _playerO) public returns (uint256) {\\n        require(_playerO != msg.sender, \\\"Cannot play against yourself\\\");\\n        \\n        uint256 gameId = nextGameId++;\\n        games[gameId] = Game({\\n            playerX: msg.sender,\\n            playerO: _playerO,\\n            currentTurn: Player.X,\\n            board: [Player.None, Player.None, Player.None,\\n                   Player.None, Player.None, Player.None,\\n                   Player.None, Player.None, Player.None],\\n            state: GameState.Active,\\n            winner: address(0)\\n        });\\n        \\n        emit GameCreated(gameId, msg.sender, _playerO);\\n        return gameId;\\n    }\\n    \\n    // Make a move\\n    function makeMove(uint256 gameId, uint8 position) public {\\n        require(position < 9, \\\"Invalid position\\\");\\n        Game storage game = games[gameId];\\n        \\n        require(game.state == GameState.Active, \\\"Game is not active\\\");\\n        require(\\n            (game.currentTurn == Player.X && msg.sender == game.playerX) ||\\n            (game.currentTurn == Player.O && msg.sender == game.playerO),\\n            \\\"Not your turn\\\"\\n        );\\n        require(game.board[position] == Player.None, \\\"Position already taken\\\");\\n        \\n        // Make the move\\n        game.board[position] = game.currentTurn;\\n        \\n        // Check for win or draw\\n        if (checkWin(game.board, game.currentTurn)) {\\n            game.state = GameState.Won;\\n            game.winner = msg.sender;\\n            emit GameWon(gameId, msg.sender);\\n        } else if (checkDraw(game.board)) {\\n            game.state = GameState.Draw;\\n            emit GameDraw(gameId);\\n        } else {\\n            // Switch turns\\n            game.currentTurn = game.currentTurn == Player.X ? Player.O : Player.X;\\n        }\\n        \\n        emit MoveMade(gameId, msg.sender, position);\\n    }\\n    \\n    // Get game state\\n    function getGame(uint256 gameId) public view returns (\\n        address playerX,\\n        address playerO,\\n        Player currentTurn,\\n        Player[9] memory board,\\n        GameState state,\\n        address winner\\n    ) {\\n        Game storage game = games[gameId];\\n        return (\\n            game.playerX,\\n            game.playerO,\\n            game.currentTurn,\\n            game.board,\\n            game.state,\\n            game.winner\\n        );\\n    }\\n    \\n    // Check for win\\n    function checkWin(Player[9] memory board, Player player) internal pure returns (bool) {\\n        // Check rows\\n        for (uint i = 0; i < 9; i += 3) {\\n            if (board[i] == player && board[i+1] == player && board[i+2] == player) {\\n                return true;\\n            }\\n        }\\n        \\n        // Check columns\\n        for (uint i = 0; i < 3; i++) {\\n            if (board[i] == player && board[i+3] == player && board[i+6] == player) {\\n                return true;\\n            }\\n        }\\n        \\n        // Check diagonals\\n        if (board[0] == player && board[4] == player && board[8] == player) {\\n            return true;\\n        }\\n        if (board[2] == player && board[4] == player && board[6] == player) {\\n            return true;\\n        }\\n        \\n        return false;\\n    }\\n    \\n    // Check for draw\\n    function checkDraw(Player[9] memory board) internal pure returns (bool) {\\n        for (uint i = 0; i < 9; i++) {\\n            if (board[i] == Player.None) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n} \",\"keccak256\":\"0xe6e0f0a434bac24136f155c1d0af6a523371b85f8a275657e42ca6b9d14b641e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610f08806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063117a5b901461005c578063474d0b5a146100c95780637fd6f7c4146100ea578063a2f77bcc146100ff578063b135bbb014610124575b600080fd5b6100af61006a366004610cf3565b6000602081905290815260409020805460018201546003909201546001600160a01b03918216928083169260ff600160a01b9092048216929182169161010090041685565b6040516100c0959493929190610d43565b60405180910390f35b6100dc6100d7366004610d8e565b61012d565b6040519081526020016100c0565b6100fd6100f8366004610dbe565b610346565b005b61011261010d366004610cf3565b6107b4565b6040516100c096959493929190610df4565b6100dc60015481565b6000336001600160a01b0383160361018c5760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f7420706c617920616761696e737420796f757273656c660000000060448201526064015b60405180910390fd5b600180546000918261019d83610e90565b909155506040805160c0810182523381526001600160a01b03861660208201526001818301528151610120810190925291925060608201908060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000905281526020016000815260006020918201819052838152808252604090819020835181546001600160a01b03199081166001600160a01b0392831617835593850151600183018054958616919092169081178255928501519193919290916001600160a81b03191617600160a01b83600281111561029157610291610d0c565b021790555060608201516102ab9060028301906009610c1e565b50608082015160038201805460ff191660018360028111156102cf576102cf610d0c565b021790555060a0919091015160039091018054610100600160a81b0319166101006001600160a01b039384160217905560408051838152336020820152918516908201527f8946648bc1dbc670d3f07e2c4de91731227b6d4ccc53b8ab1e951e84d960577e9060600160405180910390a192915050565b60098160ff161061038c5760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2103837b9b4ba34b7b760811b6044820152606401610183565b600082815260208190526040812090600382015460ff1660028111156103b4576103b4610d0c565b146103f65760405162461bcd60e51b815260206004820152601260248201527147616d65206973206e6f742061637469766560701b6044820152606401610183565b600180820154600160a01b900460ff16600281111561041757610417610d0c565b14801561042d575080546001600160a01b031633145b8061046e575060026001820154600160a01b900460ff16600281111561045557610455610d0c565b14801561046e575060018101546001600160a01b031633145b6104aa5760405162461bcd60e51b815260206004820152600d60248201526c2737ba103cb7bab9103a3ab93760991b6044820152606401610183565b6000816002018360ff16600981106104c4576104c4610ea9565b602081049091015460ff601f9092166101000a90041660028111156104eb576104eb610d0c565b146105315760405162461bcd60e51b81526020600482015260166024820152752837b9b4ba34b7b71030b63932b0b23c903a30b5b2b760511b6044820152606401610183565b600181015460ff600160a01b909104811690600283019084166009811061055a5761055a610ea9565b602091828204019190066101000a81548160ff0219169083600281111561058357610583610d0c565b021790555060408051610120810191829052610600916002840190600990826000855b82829054906101000a900460ff1660028111156105c5576105c5610d0c565b8152602060019283018181049485019490930390920291018084116105a657505050506001850154600160a01b900460ff16915061087f9050565b1561066857600381018054610100339081026001600160a81b0319909216919091176001179091556040805185815260208101929092527f4dc08ce212d967a2959e5901a545b00fd4f86c108a0de62a8d906b7b0793c6d691015b60405180910390a161076e565b604080516101208101918290526106d0916002840190600990826000855b82829054906101000a900460ff1660028111156106a5576106a5610d0c565b8152602060019283018181049485019490930390920291018084116106865790505050505050610bbe565b156107145760038101805460ff191660021790556040518381527fbde3492a0339dd7cc8e00379877e059a377bad88cd45be37d94fc781910b95c99060200161065b565b600180820154600160a01b900460ff16600281111561073557610735610d0c565b14610741576001610744565b60025b60018201805460ff60a01b1916600160a01b83600281111561076857610768610d0c565b02179055505b6040805184815233602082015260ff84168183015290517f2e609ae07cc76b1b2b76d7ada4250d5191a8eb5eb7e19181c23c5da8e9643ad19181900360600190a1505050565b60008060006107c1610cbf565b600085815260208190526040808220805460018201546003830154845161012081019586905286956001600160a01b039485169480851694600160a01b900460ff90811694600289019491811693610100909104909216918490600990828c855b82829054906101000a900460ff16600281111561084157610841610d0c565b815260206001928301818104948501949093039092029101808411610822579050505050505092509650965096509650965096505091939550919395565b6000805b60098110156109825782600281111561089e5761089e610d0c565b8482600981106108b0576108b0610ea9565b602002015160028111156108c6576108c6610d0c565b14801561091457508260028111156108e0576108e0610d0c565b846108ec836001610ebf565b600981106108fc576108fc610ea9565b6020020151600281111561091257610912610d0c565b145b8015610961575082600281111561092d5761092d610d0c565b84610939836002610ebf565b6009811061094957610949610ea9565b6020020151600281111561095f5761095f610d0c565b145b15610970576001915050610bb8565b61097b600382610ebf565b9050610883565b5060005b6003811015610a85578260028111156109a1576109a1610d0c565b8482600981106109b3576109b3610ea9565b602002015160028111156109c9576109c9610d0c565b148015610a1757508260028111156109e3576109e3610d0c565b846109ef836003610ebf565b600981106109ff576109ff610ea9565b60200201516002811115610a1557610a15610d0c565b145b8015610a645750826002811115610a3057610a30610d0c565b84610a3c836006610ebf565b60098110610a4c57610a4c610ea9565b60200201516002811115610a6257610a62610d0c565b145b15610a73576001915050610bb8565b80610a7d81610e90565b915050610986565b50816002811115610a9857610a98610d0c565b83516002811115610aab57610aab610d0c565b148015610add5750816002811115610ac557610ac5610d0c565b60808401516002811115610adb57610adb610d0c565b145b8015610b0f5750816002811115610af657610af6610d0c565b6101008401516002811115610b0d57610b0d610d0c565b145b15610b1c57506001610bb8565b816002811115610b2e57610b2e610d0c565b60408401516002811115610b4457610b44610d0c565b148015610b765750816002811115610b5e57610b5e610d0c565b60808401516002811115610b7457610b74610d0c565b145b8015610ba75750816002811115610b8f57610b8f610d0c565b60c08401516002811115610ba557610ba5610d0c565b145b15610bb457506001610bb8565b5060005b92915050565b6000805b6009811015610c15576000838260098110610bdf57610bdf610ea9565b60200201516002811115610bf557610bf5610d0c565b03610c035750600092915050565b80610c0d81610e90565b915050610bc2565b50600192915050565b600183019183908215610caf5791602002820160005b83821115610c8057835183826101000a81548160ff02191690836002811115610c5f57610c5f610d0c565b02179055509260200192600101602081600001049283019260010302610c34565b8015610cad5782816101000a81549060ff0219169055600101602081600001049283019260010302610c80565b505b50610cbb929150610cde565b5090565b6040518061012001604052806009906020820280368337509192915050565b5b80821115610cbb5760008155600101610cdf565b600060208284031215610d0557600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60038110610d4057634e487b7160e01b600052602160045260246000fd5b50565b6001600160a01b038681168252858116602083015260a0820190610d6686610d22565b856040840152610d7585610d22565b8460608401528084166080840152509695505050505050565b600060208284031215610da057600080fd5b81356001600160a01b0381168114610db757600080fd5b9392505050565b60008060408385031215610dd157600080fd5b82359150602083013560ff81168114610de957600080fd5b809150509250929050565b6001600160a01b0387811682528681166020808401919091526101c083019190610e1d88610d22565b876040850152606084018760005b6009811015610e51578151610e3f81610d22565b83529183019190830190600101610e2b565b50505050610e5e85610d22565b846101808401528084166101a084015250979650505050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201610ea257610ea2610e7a565b5060010190565b634e487b7160e01b600052603260045260246000fd5b80820180821115610bb857610bb8610e7a56fea26469706673582212206d735139ecbf4b496806a9f61823c94f2e3708ff9a593ebd32408cc81a2a284464736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063117a5b901461005c578063474d0b5a146100c95780637fd6f7c4146100ea578063a2f77bcc146100ff578063b135bbb014610124575b600080fd5b6100af61006a366004610cf3565b6000602081905290815260409020805460018201546003909201546001600160a01b03918216928083169260ff600160a01b9092048216929182169161010090041685565b6040516100c0959493929190610d43565b60405180910390f35b6100dc6100d7366004610d8e565b61012d565b6040519081526020016100c0565b6100fd6100f8366004610dbe565b610346565b005b61011261010d366004610cf3565b6107b4565b6040516100c096959493929190610df4565b6100dc60015481565b6000336001600160a01b0383160361018c5760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f7420706c617920616761696e737420796f757273656c660000000060448201526064015b60405180910390fd5b600180546000918261019d83610e90565b909155506040805160c0810182523381526001600160a01b03861660208201526001818301528151610120810190925291925060608201908060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000905281526020016000815260006020918201819052838152808252604090819020835181546001600160a01b03199081166001600160a01b0392831617835593850151600183018054958616919092169081178255928501519193919290916001600160a81b03191617600160a01b83600281111561029157610291610d0c565b021790555060608201516102ab9060028301906009610c1e565b50608082015160038201805460ff191660018360028111156102cf576102cf610d0c565b021790555060a0919091015160039091018054610100600160a81b0319166101006001600160a01b039384160217905560408051838152336020820152918516908201527f8946648bc1dbc670d3f07e2c4de91731227b6d4ccc53b8ab1e951e84d960577e9060600160405180910390a192915050565b60098160ff161061038c5760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2103837b9b4ba34b7b760811b6044820152606401610183565b600082815260208190526040812090600382015460ff1660028111156103b4576103b4610d0c565b146103f65760405162461bcd60e51b815260206004820152601260248201527147616d65206973206e6f742061637469766560701b6044820152606401610183565b600180820154600160a01b900460ff16600281111561041757610417610d0c565b14801561042d575080546001600160a01b031633145b8061046e575060026001820154600160a01b900460ff16600281111561045557610455610d0c565b14801561046e575060018101546001600160a01b031633145b6104aa5760405162461bcd60e51b815260206004820152600d60248201526c2737ba103cb7bab9103a3ab93760991b6044820152606401610183565b6000816002018360ff16600981106104c4576104c4610ea9565b602081049091015460ff601f9092166101000a90041660028111156104eb576104eb610d0c565b146105315760405162461bcd60e51b81526020600482015260166024820152752837b9b4ba34b7b71030b63932b0b23c903a30b5b2b760511b6044820152606401610183565b600181015460ff600160a01b909104811690600283019084166009811061055a5761055a610ea9565b602091828204019190066101000a81548160ff0219169083600281111561058357610583610d0c565b021790555060408051610120810191829052610600916002840190600990826000855b82829054906101000a900460ff1660028111156105c5576105c5610d0c565b8152602060019283018181049485019490930390920291018084116105a657505050506001850154600160a01b900460ff16915061087f9050565b1561066857600381018054610100339081026001600160a81b0319909216919091176001179091556040805185815260208101929092527f4dc08ce212d967a2959e5901a545b00fd4f86c108a0de62a8d906b7b0793c6d691015b60405180910390a161076e565b604080516101208101918290526106d0916002840190600990826000855b82829054906101000a900460ff1660028111156106a5576106a5610d0c565b8152602060019283018181049485019490930390920291018084116106865790505050505050610bbe565b156107145760038101805460ff191660021790556040518381527fbde3492a0339dd7cc8e00379877e059a377bad88cd45be37d94fc781910b95c99060200161065b565b600180820154600160a01b900460ff16600281111561073557610735610d0c565b14610741576001610744565b60025b60018201805460ff60a01b1916600160a01b83600281111561076857610768610d0c565b02179055505b6040805184815233602082015260ff84168183015290517f2e609ae07cc76b1b2b76d7ada4250d5191a8eb5eb7e19181c23c5da8e9643ad19181900360600190a1505050565b60008060006107c1610cbf565b600085815260208190526040808220805460018201546003830154845161012081019586905286956001600160a01b039485169480851694600160a01b900460ff90811694600289019491811693610100909104909216918490600990828c855b82829054906101000a900460ff16600281111561084157610841610d0c565b815260206001928301818104948501949093039092029101808411610822579050505050505092509650965096509650965096505091939550919395565b6000805b60098110156109825782600281111561089e5761089e610d0c565b8482600981106108b0576108b0610ea9565b602002015160028111156108c6576108c6610d0c565b14801561091457508260028111156108e0576108e0610d0c565b846108ec836001610ebf565b600981106108fc576108fc610ea9565b6020020151600281111561091257610912610d0c565b145b8015610961575082600281111561092d5761092d610d0c565b84610939836002610ebf565b6009811061094957610949610ea9565b6020020151600281111561095f5761095f610d0c565b145b15610970576001915050610bb8565b61097b600382610ebf565b9050610883565b5060005b6003811015610a85578260028111156109a1576109a1610d0c565b8482600981106109b3576109b3610ea9565b602002015160028111156109c9576109c9610d0c565b148015610a1757508260028111156109e3576109e3610d0c565b846109ef836003610ebf565b600981106109ff576109ff610ea9565b60200201516002811115610a1557610a15610d0c565b145b8015610a645750826002811115610a3057610a30610d0c565b84610a3c836006610ebf565b60098110610a4c57610a4c610ea9565b60200201516002811115610a6257610a62610d0c565b145b15610a73576001915050610bb8565b80610a7d81610e90565b915050610986565b50816002811115610a9857610a98610d0c565b83516002811115610aab57610aab610d0c565b148015610add5750816002811115610ac557610ac5610d0c565b60808401516002811115610adb57610adb610d0c565b145b8015610b0f5750816002811115610af657610af6610d0c565b6101008401516002811115610b0d57610b0d610d0c565b145b15610b1c57506001610bb8565b816002811115610b2e57610b2e610d0c565b60408401516002811115610b4457610b44610d0c565b148015610b765750816002811115610b5e57610b5e610d0c565b60808401516002811115610b7457610b74610d0c565b145b8015610ba75750816002811115610b8f57610b8f610d0c565b60c08401516002811115610ba557610ba5610d0c565b145b15610bb457506001610bb8565b5060005b92915050565b6000805b6009811015610c15576000838260098110610bdf57610bdf610ea9565b60200201516002811115610bf557610bf5610d0c565b03610c035750600092915050565b80610c0d81610e90565b915050610bc2565b50600192915050565b600183019183908215610caf5791602002820160005b83821115610c8057835183826101000a81548160ff02191690836002811115610c5f57610c5f610d0c565b02179055509260200192600101602081600001049283019260010302610c34565b8015610cad5782816101000a81549060ff0219169055600101602081600001049283019260010302610c80565b505b50610cbb929150610cde565b5090565b6040518061012001604052806009906020820280368337509192915050565b5b80821115610cbb5760008155600101610cdf565b600060208284031215610d0557600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60038110610d4057634e487b7160e01b600052602160045260246000fd5b50565b6001600160a01b038681168252858116602083015260a0820190610d6686610d22565b856040840152610d7585610d22565b8460608401528084166080840152509695505050505050565b600060208284031215610da057600080fd5b81356001600160a01b0381168114610db757600080fd5b9392505050565b60008060408385031215610dd157600080fd5b82359150602083013560ff81168114610de957600080fd5b809150509250929050565b6001600160a01b0387811682528681166020808401919091526101c083019190610e1d88610d22565b876040850152606084018760005b6009811015610e51578151610e3f81610d22565b83529183019190830190600101610e2b565b50505050610e5e85610d22565b846101808401528084166101a084015250979650505050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201610ea257610ea2610e7a565b5060010190565b634e487b7160e01b600052603260045260246000fd5b80820180821115610bb857610bb8610e7a56fea26469706673582212206d735139ecbf4b496806a9f61823c94f2e3708ff9a593ebd32408cc81a2a284464736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 32,
        "contract": "contracts/TicTacToe.sol:TicTacToe",
        "label": "games",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Game)27_storage)"
      },
      {
        "astId": 34,
        "contract": "contracts/TicTacToe.sol:TicTacToe",
        "label": "nextGameId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_enum(Player)5)9_storage": {
        "base": "t_enum(Player)5",
        "encoding": "inplace",
        "label": "enum TicTacToe.Player[9]",
        "numberOfBytes": "32"
      },
      "t_enum(GameState)9": {
        "encoding": "inplace",
        "label": "enum TicTacToe.GameState",
        "numberOfBytes": "1"
      },
      "t_enum(Player)5": {
        "encoding": "inplace",
        "label": "enum TicTacToe.Player",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Game)27_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TicTacToe.Game)",
        "numberOfBytes": "32",
        "value": "t_struct(Game)27_storage"
      },
      "t_struct(Game)27_storage": {
        "encoding": "inplace",
        "label": "struct TicTacToe.Game",
        "members": [
          {
            "astId": 11,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "playerX",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "playerO",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 16,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "currentTurn",
            "offset": 20,
            "slot": "1",
            "type": "t_enum(Player)5"
          },
          {
            "astId": 21,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "board",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_enum(Player)5)9_storage"
          },
          {
            "astId": 24,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "state",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(GameState)9"
          },
          {
            "astId": 26,
            "contract": "contracts/TicTacToe.sol:TicTacToe",
            "label": "winner",
            "offset": 1,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}